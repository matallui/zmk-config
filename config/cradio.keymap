/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};
/ {
    behaviors {
        comma_apos: comma_apos {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp APOS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dot_bang: dot_bang {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        mt_dot_bang: mt_dot_bang {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            #binding-cells = <2>;
            bindings = <&kp>, <&dot_bang>;
        };
        spc_under: spc_under {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SPC>, <&kp UNDER>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        mt_spc_under: mt_spc_under {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            #binding-cells = <2>;
            bindings = <&kp>, <&spc_under>;
        };
    };
};
/ { 
    keymap {
        compatible = "zmk,keymap";
                
        default_layer {
        bindings = <
        &kp Q       &kp W       &kp E       &kp R       &kp T               &kp Y                 &kp U       &kp I       &kp O               &kp P
        &kp A       &kp S       &kp D       &kp F       &kp G               &kp H                 &kp J       &kp K       &kp L               &kp RET
        &mt LGUI Z  &mt LALT X  &kp C       &kp V       &kp B               &kp N                 &kp M       &comma_apos &mt_dot_bang RALT 0 &mt RGUI SLASH
                                            &kp LCTRL   &kp LSHIFT          &mt_spc_under LC(LS(LALT)) 0  &to 1 
        >;
        };

        left_layer {
        bindings = <
        &kp ESC         &kp AT    &kp POUND     &kp DLLR    &kp PRCNT           &kp CARET             &kp AMPS    &kp LT      &kp GT      &kp BSPC
        &kp TAB         &kp DQT   &kp PIPE      &kp EXCL    &kp MINUS           &kp COLON             &kp LPAR    &kp RPAR    &kp SEMI    &kp RET
        &mt TILDE GRAVE &kp APOS  &kp BSLH      &kp QMARK   &kp UNDER           &kp LBKT              &kp LBRC    &kp RBRC    &kp RBKT    &to 2
                                                &to 0       &kp LGUI            &mt_spc_under LC(LS(LALT)) 0  &to 3
        >;
        };
        
        right_layer {
        bindings = <
        &kp ESC     &none       &kp LG(LS(N3))  &kp LG(LS(N4))  &kp LG(LS(N5))      &kp HOME    &kp PG_DN   &kp PG_UP   &kp END     &kp BSPC
        &kp TAB     &none       &none           &none           &none               &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &kp RET
        &none       &none       &none           &none           &kp LCTRL           &kp RCTRL   &none       &none       &none       &none
                                                &to 0           &kp LGUI            &kp RALT    &to 1
        >;
        };	
        
        tri_layer {
        bindings = <
        &kp ESC     &kp C_PP    &kp C_PREV    &kp C_NEXT    &kp STAR          &kp EQUAL             &kp N7  &kp N8  &kp N9  &kp BSPC
        &kp TAB     &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp MINUS         &kp PLUS              &kp N4  &kp N5  &kp N6  &kp RET
        &none       &none       &kp C_BRI_DN  &kp C_BRI_UP  &kp DOT           &kp N0                &kp N1  &kp N2  &kp N3  &to 2
                                              &to 0         &kp LGUI          &mt_spc_under LC(LS(LALT)) 0  &to 1
        >;
        };
    };
};
